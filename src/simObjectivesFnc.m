function [ objectiveVars ] = simObjectivesFnc( simObjCount, simMean,...
                                simRange, gridMask )
                            
% simObjectivesFnc.m This function generates 2-D random simulations of 
% problem objective surfaces by simulating values from a multivariate
% Gaussian distribution using a user specified distance based covariance
% structure.
% 
%
% DESCRIPTION:
%
%   Function to generate 2-D random simulations of problem objective 
%   surfaces which are sampled from multivariate Gaussian distribution with
%   a covariance structure specified by the user
% 
%   Warning: minimal error checking is performed.
%
% SYNTAX:
%
%   [ objectiveVars ] =  simObjectivesFnc(  simObjCount, simMean,...
%                           simRange, gridMask )
%
% INPUTS:
%
%   simObjCount =   [g] scalar value indicating the number of simulated 
%                   objective realizations to be generate by the function
%
%   simMean =       [d] scalar value indicating the mean objective value to
%                   be exhibited by the simulated objective realizations 
%                   generated by the function
%
%   simRange =      [h] scalar value indicating the distance range to be
%                   used to generate the covariance structure used in the 
%                   simulation process
%
%   gridMask =      [m x n] binary array with valid pathway grid cells 
%                   labeled as ones and invalid pathway grid cells labeled 
%                   as NaN placeholders
%
% OUTPUTS:
%
%   objectiveVars = [m x n x g] array in which the first two dimensions 
%                   [n x m] correspond to the two spatial dimensions of the
%                   gridMask and in which the third dimension corresponds
%                   to the index of the objective variable being simulated
%
% EXAMPLES:
%
%   Example 1 =
%
%                   gridMask = zeros(100); 
%                   gridMask(1,:) = nan; 
%                   gridMask(:,1) = nan; 
%                   gridMask(end,:) = nan; 
%                   gridMask(:,end) = nan;
%
%                   simObjCount = 3;
%                   simMean = 5;
%                   simRange = 100;
%
%                   [objectiveVars] = simObjectivesFnc(simObjCount,...
%                                       simMean,simRange,gridMask);
%
% CREDITS:
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                                                      %%
%%%                          Eric Daniel Fournier                        %%
%%%                  Bren School of Environmental Science                %%
%%%               University of California Santa Barbara                 %%
%%%                            February 2014                             %%
%%%                                                                      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Parse Inputs

p = inputParser;

addRequired(p,'nargin',@(x) x == 4);
addRequired(p,'simObjCount',@(x) isnumeric(x) && isscalar(x) &&...
    ~isempty(x));
addRequired(p,'simMean',@(x) isnumeric(x) && isscalar(x) && ~isempty(x));
addRequired(p,'simRange',@(x) isnumeric(x) && isscalar(x) && ~isempty(x));
addRequired(p,'gridMask',@(x) isnumeric(x) && ismatrix(x) && ~isempty(x));

parse(p,nargin,simObjCount,simMean,simRange,gridMask);

%% Iteration Parameters

gS = size(gridMask);
xSize = 1;
ySize = 1;
xMin = 0.5;
yMin = 0.5;
gridSpecs = [gS(1,1) xMin xSize; gS(1,2) yMin ySize];
xy = makegrid(gridSpecs);

%% Build Covariance Model

c = exp(-3*squareform(pdist(xy))/simRange);

%% Simulate Objective Realizations

s = repmat(simMean, [gS(1,1)*gS(1,2) 1]);
yy = mvnrnd(s,c,simObjCount)';

%% Generate Final Outputs

objectiveVars = reshape(yy,gS(1,1),gS(1,2),simObjCount);

end